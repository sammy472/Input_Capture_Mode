
Input_Capture_Mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001ac8  08001ac8  00011ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ae8  08001ae8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001ae8  08001ae8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ae8  08001ae8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ae8  08001ae8  00011ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001aec  08001aec  00011aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001af0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  08001afc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08001afc  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f28  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001506  00000000  00000000  00027f5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000938  00000000  00000000  00029468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000890  00000000  00000000  00029da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016584  00000000  00000000  0002a630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000928f  00000000  00000000  00040bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083e2e  00000000  00000000  00049e43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cdc71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025f4  00000000  00000000  000cdcc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001ab0 	.word	0x08001ab0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001ab0 	.word	0x08001ab0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f9c2 	bl	80004d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f812 	bl	800017c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8a8 	bl	80002ac <MX_GPIO_Init>
  MX_TIM2_Init();
 800015c:	f000 f852 	bl	8000204 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000160:	4804      	ldr	r0, [pc, #16]	; (8000174 <main+0x28>)
 8000162:	f001 f8e5 	bl	8001330 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  counter = __HAL_TIM_GET_COUNTER(&htim2);
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <main+0x28>)
 8000168:	681b      	ldr	r3, [r3, #0]
 800016a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800016c:	4a02      	ldr	r2, [pc, #8]	; (8000178 <main+0x2c>)
 800016e:	6013      	str	r3, [r2, #0]
 8000170:	e7f9      	b.n	8000166 <main+0x1a>
 8000172:	bf00      	nop
 8000174:	20000028 	.word	0x20000028
 8000178:	20000074 	.word	0x20000074

0800017c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b090      	sub	sp, #64	; 0x40
 8000180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000182:	f107 0318 	add.w	r3, r7, #24
 8000186:	2228      	movs	r2, #40	; 0x28
 8000188:	2100      	movs	r1, #0
 800018a:	4618      	mov	r0, r3
 800018c:	f001 fc88 	bl	8001aa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000190:	1d3b      	adds	r3, r7, #4
 8000192:	2200      	movs	r2, #0
 8000194:	601a      	str	r2, [r3, #0]
 8000196:	605a      	str	r2, [r3, #4]
 8000198:	609a      	str	r2, [r3, #8]
 800019a:	60da      	str	r2, [r3, #12]
 800019c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800019e:	2301      	movs	r3, #1
 80001a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001a8:	2300      	movs	r3, #0
 80001aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ac:	2301      	movs	r3, #1
 80001ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b0:	2302      	movs	r3, #2
 80001b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80001ba:	2300      	movs	r3, #0
 80001bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001be:	f107 0318 	add.w	r3, r7, #24
 80001c2:	4618      	mov	r0, r3
 80001c4:	f000 fc7c 	bl	8000ac0 <HAL_RCC_OscConfig>
 80001c8:	4603      	mov	r3, r0
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d001      	beq.n	80001d2 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80001ce:	f000 f8a9 	bl	8000324 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d2:	230f      	movs	r3, #15
 80001d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d6:	2302      	movs	r3, #2
 80001d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80001da:	2380      	movs	r3, #128	; 0x80
 80001dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e4:	2300      	movs	r3, #0
 80001e6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	2100      	movs	r1, #0
 80001ec:	4618      	mov	r0, r3
 80001ee:	f000 fee9 	bl	8000fc4 <HAL_RCC_ClockConfig>
 80001f2:	4603      	mov	r3, r0
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d001      	beq.n	80001fc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80001f8:	f000 f894 	bl	8000324 <Error_Handler>
  }
}
 80001fc:	bf00      	nop
 80001fe:	3740      	adds	r7, #64	; 0x40
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}

08000204 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b088      	sub	sp, #32
 8000208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800020a:	f107 030c 	add.w	r3, r7, #12
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	609a      	str	r2, [r3, #8]
 8000216:	60da      	str	r2, [r3, #12]
 8000218:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	2200      	movs	r2, #0
 800021e:	601a      	str	r2, [r3, #0]
 8000220:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000222:	4b21      	ldr	r3, [pc, #132]	; (80002a8 <MX_TIM2_Init+0xa4>)
 8000224:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000228:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 800022a:	4b1f      	ldr	r3, [pc, #124]	; (80002a8 <MX_TIM2_Init+0xa4>)
 800022c:	2200      	movs	r2, #0
 800022e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000230:	4b1d      	ldr	r3, [pc, #116]	; (80002a8 <MX_TIM2_Init+0xa4>)
 8000232:	2200      	movs	r2, #0
 8000234:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000236:	4b1c      	ldr	r3, [pc, #112]	; (80002a8 <MX_TIM2_Init+0xa4>)
 8000238:	2264      	movs	r2, #100	; 0x64
 800023a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800023c:	4b1a      	ldr	r3, [pc, #104]	; (80002a8 <MX_TIM2_Init+0xa4>)
 800023e:	2200      	movs	r2, #0
 8000240:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000242:	4b19      	ldr	r3, [pc, #100]	; (80002a8 <MX_TIM2_Init+0xa4>)
 8000244:	2280      	movs	r2, #128	; 0x80
 8000246:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000248:	4817      	ldr	r0, [pc, #92]	; (80002a8 <MX_TIM2_Init+0xa4>)
 800024a:	f001 f821 	bl	8001290 <HAL_TIM_Base_Init>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000254:	f000 f866 	bl	8000324 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000258:	2307      	movs	r3, #7
 800025a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 800025c:	2370      	movs	r3, #112	; 0x70
 800025e:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8000260:	2300      	movs	r3, #0
 8000262:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerFilter = 15;
 8000268:	230f      	movs	r3, #15
 800026a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800026c:	f107 030c 	add.w	r3, r7, #12
 8000270:	4619      	mov	r1, r3
 8000272:	480d      	ldr	r0, [pc, #52]	; (80002a8 <MX_TIM2_Init+0xa4>)
 8000274:	f001 f9ae 	bl	80015d4 <HAL_TIM_SlaveConfigSynchro>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800027e:	f000 f851 	bl	8000324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000282:	2300      	movs	r3, #0
 8000284:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000286:	2300      	movs	r3, #0
 8000288:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	4619      	mov	r1, r3
 800028e:	4806      	ldr	r0, [pc, #24]	; (80002a8 <MX_TIM2_Init+0xa4>)
 8000290:	f001 fb72 	bl	8001978 <HAL_TIMEx_MasterConfigSynchronization>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800029a:	f000 f843 	bl	8000324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800029e:	bf00      	nop
 80002a0:	3720      	adds	r7, #32
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	20000028 	.word	0x20000028

080002ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002b2:	4b14      	ldr	r3, [pc, #80]	; (8000304 <MX_GPIO_Init+0x58>)
 80002b4:	699b      	ldr	r3, [r3, #24]
 80002b6:	4a13      	ldr	r2, [pc, #76]	; (8000304 <MX_GPIO_Init+0x58>)
 80002b8:	f043 0310 	orr.w	r3, r3, #16
 80002bc:	6193      	str	r3, [r2, #24]
 80002be:	4b11      	ldr	r3, [pc, #68]	; (8000304 <MX_GPIO_Init+0x58>)
 80002c0:	699b      	ldr	r3, [r3, #24]
 80002c2:	f003 0310 	and.w	r3, r3, #16
 80002c6:	60fb      	str	r3, [r7, #12]
 80002c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002ca:	4b0e      	ldr	r3, [pc, #56]	; (8000304 <MX_GPIO_Init+0x58>)
 80002cc:	699b      	ldr	r3, [r3, #24]
 80002ce:	4a0d      	ldr	r2, [pc, #52]	; (8000304 <MX_GPIO_Init+0x58>)
 80002d0:	f043 0320 	orr.w	r3, r3, #32
 80002d4:	6193      	str	r3, [r2, #24]
 80002d6:	4b0b      	ldr	r3, [pc, #44]	; (8000304 <MX_GPIO_Init+0x58>)
 80002d8:	699b      	ldr	r3, [r3, #24]
 80002da:	f003 0320 	and.w	r3, r3, #32
 80002de:	60bb      	str	r3, [r7, #8]
 80002e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e2:	4b08      	ldr	r3, [pc, #32]	; (8000304 <MX_GPIO_Init+0x58>)
 80002e4:	699b      	ldr	r3, [r3, #24]
 80002e6:	4a07      	ldr	r2, [pc, #28]	; (8000304 <MX_GPIO_Init+0x58>)
 80002e8:	f043 0304 	orr.w	r3, r3, #4
 80002ec:	6193      	str	r3, [r2, #24]
 80002ee:	4b05      	ldr	r3, [pc, #20]	; (8000304 <MX_GPIO_Init+0x58>)
 80002f0:	699b      	ldr	r3, [r3, #24]
 80002f2:	f003 0304 	and.w	r3, r3, #4
 80002f6:	607b      	str	r3, [r7, #4]
 80002f8:	687b      	ldr	r3, [r7, #4]

}
 80002fa:	bf00      	nop
 80002fc:	3714      	adds	r7, #20
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr
 8000304:	40021000 	.word	0x40021000

08000308 <HAL_TIM_IC_CaptureCallback>:
//void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
//	htim->Instance->CCR1 = oc_dma[counter];
//	counter++;
//	if(counter == 50)counter = 0;
//}
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
	captureDone = true;
 8000310:	4b03      	ldr	r3, [pc, #12]	; (8000320 <HAL_TIM_IC_CaptureCallback+0x18>)
 8000312:	2201      	movs	r2, #1
 8000314:	701a      	strb	r2, [r3, #0]
}
 8000316:	bf00      	nop
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr
 8000320:	20000070 	.word	0x20000070

08000324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000328:	b672      	cpsid	i
}
 800032a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800032c:	e7fe      	b.n	800032c <Error_Handler+0x8>
	...

08000330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000330:	b480      	push	{r7}
 8000332:	b085      	sub	sp, #20
 8000334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000336:	4b15      	ldr	r3, [pc, #84]	; (800038c <HAL_MspInit+0x5c>)
 8000338:	699b      	ldr	r3, [r3, #24]
 800033a:	4a14      	ldr	r2, [pc, #80]	; (800038c <HAL_MspInit+0x5c>)
 800033c:	f043 0301 	orr.w	r3, r3, #1
 8000340:	6193      	str	r3, [r2, #24]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <HAL_MspInit+0x5c>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	f003 0301 	and.w	r3, r3, #1
 800034a:	60bb      	str	r3, [r7, #8]
 800034c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800034e:	4b0f      	ldr	r3, [pc, #60]	; (800038c <HAL_MspInit+0x5c>)
 8000350:	69db      	ldr	r3, [r3, #28]
 8000352:	4a0e      	ldr	r2, [pc, #56]	; (800038c <HAL_MspInit+0x5c>)
 8000354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000358:	61d3      	str	r3, [r2, #28]
 800035a:	4b0c      	ldr	r3, [pc, #48]	; (800038c <HAL_MspInit+0x5c>)
 800035c:	69db      	ldr	r3, [r3, #28]
 800035e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000366:	4b0a      	ldr	r3, [pc, #40]	; (8000390 <HAL_MspInit+0x60>)
 8000368:	685b      	ldr	r3, [r3, #4]
 800036a:	60fb      	str	r3, [r7, #12]
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000372:	60fb      	str	r3, [r7, #12]
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800037a:	60fb      	str	r3, [r7, #12]
 800037c:	4a04      	ldr	r2, [pc, #16]	; (8000390 <HAL_MspInit+0x60>)
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000382:	bf00      	nop
 8000384:	3714      	adds	r7, #20
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr
 800038c:	40021000 	.word	0x40021000
 8000390:	40010000 	.word	0x40010000

08000394 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b088      	sub	sp, #32
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039c:	f107 0310 	add.w	r3, r7, #16
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
 80003a4:	605a      	str	r2, [r3, #4]
 80003a6:	609a      	str	r2, [r3, #8]
 80003a8:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80003b2:	d12b      	bne.n	800040c <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80003b4:	4b17      	ldr	r3, [pc, #92]	; (8000414 <HAL_TIM_Base_MspInit+0x80>)
 80003b6:	69db      	ldr	r3, [r3, #28]
 80003b8:	4a16      	ldr	r2, [pc, #88]	; (8000414 <HAL_TIM_Base_MspInit+0x80>)
 80003ba:	f043 0301 	orr.w	r3, r3, #1
 80003be:	61d3      	str	r3, [r2, #28]
 80003c0:	4b14      	ldr	r3, [pc, #80]	; (8000414 <HAL_TIM_Base_MspInit+0x80>)
 80003c2:	69db      	ldr	r3, [r3, #28]
 80003c4:	f003 0301 	and.w	r3, r3, #1
 80003c8:	60fb      	str	r3, [r7, #12]
 80003ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003cc:	4b11      	ldr	r3, [pc, #68]	; (8000414 <HAL_TIM_Base_MspInit+0x80>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a10      	ldr	r2, [pc, #64]	; (8000414 <HAL_TIM_Base_MspInit+0x80>)
 80003d2:	f043 0304 	orr.w	r3, r3, #4
 80003d6:	6193      	str	r3, [r2, #24]
 80003d8:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <HAL_TIM_Base_MspInit+0x80>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f003 0304 	and.w	r3, r3, #4
 80003e0:	60bb      	str	r3, [r7, #8]
 80003e2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80003e4:	2301      	movs	r3, #1
 80003e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003e8:	2300      	movs	r3, #0
 80003ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ec:	2300      	movs	r3, #0
 80003ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003f0:	f107 0310 	add.w	r3, r7, #16
 80003f4:	4619      	mov	r1, r3
 80003f6:	4808      	ldr	r0, [pc, #32]	; (8000418 <HAL_TIM_Base_MspInit+0x84>)
 80003f8:	f000 f9de 	bl	80007b8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80003fc:	2200      	movs	r2, #0
 80003fe:	2100      	movs	r1, #0
 8000400:	201c      	movs	r0, #28
 8000402:	f000 f9a2 	bl	800074a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000406:	201c      	movs	r0, #28
 8000408:	f000 f9bb 	bl	8000782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800040c:	bf00      	nop
 800040e:	3720      	adds	r7, #32
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	40021000 	.word	0x40021000
 8000418:	40010800 	.word	0x40010800

0800041c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000420:	e7fe      	b.n	8000420 <NMI_Handler+0x4>

08000422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000422:	b480      	push	{r7}
 8000424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000426:	e7fe      	b.n	8000426 <HardFault_Handler+0x4>

08000428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800042c:	e7fe      	b.n	800042c <MemManage_Handler+0x4>

0800042e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800042e:	b480      	push	{r7}
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000432:	e7fe      	b.n	8000432 <BusFault_Handler+0x4>

08000434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000438:	e7fe      	b.n	8000438 <UsageFault_Handler+0x4>

0800043a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800043a:	b480      	push	{r7}
 800043c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800043e:	bf00      	nop
 8000440:	46bd      	mov	sp, r7
 8000442:	bc80      	pop	{r7}
 8000444:	4770      	bx	lr

08000446 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800044a:	bf00      	nop
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr

08000452 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000452:	b480      	push	{r7}
 8000454:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000456:	bf00      	nop
 8000458:	46bd      	mov	sp, r7
 800045a:	bc80      	pop	{r7}
 800045c:	4770      	bx	lr

0800045e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800045e:	b580      	push	{r7, lr}
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000462:	f000 f87f 	bl	8000564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000466:	bf00      	nop
 8000468:	bd80      	pop	{r7, pc}
	...

0800046c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000470:	4802      	ldr	r0, [pc, #8]	; (800047c <TIM2_IRQHandler+0x10>)
 8000472:	f000 ffa7 	bl	80013c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000476:	bf00      	nop
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	20000028 	.word	0x20000028

08000480 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000484:	bf00      	nop
 8000486:	46bd      	mov	sp, r7
 8000488:	bc80      	pop	{r7}
 800048a:	4770      	bx	lr

0800048c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800048c:	480c      	ldr	r0, [pc, #48]	; (80004c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800048e:	490d      	ldr	r1, [pc, #52]	; (80004c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000490:	4a0d      	ldr	r2, [pc, #52]	; (80004c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000494:	e002      	b.n	800049c <LoopCopyDataInit>

08000496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800049a:	3304      	adds	r3, #4

0800049c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800049c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800049e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004a0:	d3f9      	bcc.n	8000496 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004a2:	4a0a      	ldr	r2, [pc, #40]	; (80004cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004a4:	4c0a      	ldr	r4, [pc, #40]	; (80004d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80004a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004a8:	e001      	b.n	80004ae <LoopFillZerobss>

080004aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004ac:	3204      	adds	r2, #4

080004ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004b0:	d3fb      	bcc.n	80004aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004b2:	f7ff ffe5 	bl	8000480 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004b6:	f001 facf 	bl	8001a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ba:	f7ff fe47 	bl	800014c <main>
  bx lr
 80004be:	4770      	bx	lr
  ldr r0, =_sdata
 80004c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80004c8:	08001af0 	.word	0x08001af0
  ldr r2, =_sbss
 80004cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80004d0:	2000007c 	.word	0x2000007c

080004d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004d4:	e7fe      	b.n	80004d4 <ADC1_2_IRQHandler>
	...

080004d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004dc:	4b08      	ldr	r3, [pc, #32]	; (8000500 <HAL_Init+0x28>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a07      	ldr	r2, [pc, #28]	; (8000500 <HAL_Init+0x28>)
 80004e2:	f043 0310 	orr.w	r3, r3, #16
 80004e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004e8:	2003      	movs	r0, #3
 80004ea:	f000 f923 	bl	8000734 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004ee:	200f      	movs	r0, #15
 80004f0:	f000 f808 	bl	8000504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004f4:	f7ff ff1c 	bl	8000330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004f8:	2300      	movs	r3, #0
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40022000 	.word	0x40022000

08000504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800050c:	4b12      	ldr	r3, [pc, #72]	; (8000558 <HAL_InitTick+0x54>)
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <HAL_InitTick+0x58>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	4619      	mov	r1, r3
 8000516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800051a:	fbb3 f3f1 	udiv	r3, r3, r1
 800051e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000522:	4618      	mov	r0, r3
 8000524:	f000 f93b 	bl	800079e <HAL_SYSTICK_Config>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800052e:	2301      	movs	r3, #1
 8000530:	e00e      	b.n	8000550 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2b0f      	cmp	r3, #15
 8000536:	d80a      	bhi.n	800054e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000538:	2200      	movs	r2, #0
 800053a:	6879      	ldr	r1, [r7, #4]
 800053c:	f04f 30ff 	mov.w	r0, #4294967295
 8000540:	f000 f903 	bl	800074a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000544:	4a06      	ldr	r2, [pc, #24]	; (8000560 <HAL_InitTick+0x5c>)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800054a:	2300      	movs	r3, #0
 800054c:	e000      	b.n	8000550 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800054e:	2301      	movs	r3, #1
}
 8000550:	4618      	mov	r0, r3
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000000 	.word	0x20000000
 800055c:	20000008 	.word	0x20000008
 8000560:	20000004 	.word	0x20000004

08000564 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000568:	4b05      	ldr	r3, [pc, #20]	; (8000580 <HAL_IncTick+0x1c>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	461a      	mov	r2, r3
 800056e:	4b05      	ldr	r3, [pc, #20]	; (8000584 <HAL_IncTick+0x20>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4413      	add	r3, r2
 8000574:	4a03      	ldr	r2, [pc, #12]	; (8000584 <HAL_IncTick+0x20>)
 8000576:	6013      	str	r3, [r2, #0]
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr
 8000580:	20000008 	.word	0x20000008
 8000584:	20000078 	.word	0x20000078

08000588 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  return uwTick;
 800058c:	4b02      	ldr	r3, [pc, #8]	; (8000598 <HAL_GetTick+0x10>)
 800058e:	681b      	ldr	r3, [r3, #0]
}
 8000590:	4618      	mov	r0, r3
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr
 8000598:	20000078 	.word	0x20000078

0800059c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f003 0307 	and.w	r3, r3, #7
 80005aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <__NVIC_SetPriorityGrouping+0x44>)
 80005ae:	68db      	ldr	r3, [r3, #12]
 80005b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005b2:	68ba      	ldr	r2, [r7, #8]
 80005b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005b8:	4013      	ands	r3, r2
 80005ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ce:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <__NVIC_SetPriorityGrouping+0x44>)
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	60d3      	str	r3, [r2, #12]
}
 80005d4:	bf00      	nop
 80005d6:	3714      	adds	r7, #20
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	e000ed00 	.word	0xe000ed00

080005e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <__NVIC_GetPriorityGrouping+0x18>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	0a1b      	lsrs	r3, r3, #8
 80005ee:	f003 0307 	and.w	r3, r3, #7
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bc80      	pop	{r7}
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800060a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060e:	2b00      	cmp	r3, #0
 8000610:	db0b      	blt.n	800062a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	f003 021f 	and.w	r2, r3, #31
 8000618:	4906      	ldr	r1, [pc, #24]	; (8000634 <__NVIC_EnableIRQ+0x34>)
 800061a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061e:	095b      	lsrs	r3, r3, #5
 8000620:	2001      	movs	r0, #1
 8000622:	fa00 f202 	lsl.w	r2, r0, r2
 8000626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr
 8000634:	e000e100 	.word	0xe000e100

08000638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	6039      	str	r1, [r7, #0]
 8000642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000648:	2b00      	cmp	r3, #0
 800064a:	db0a      	blt.n	8000662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	b2da      	uxtb	r2, r3
 8000650:	490c      	ldr	r1, [pc, #48]	; (8000684 <__NVIC_SetPriority+0x4c>)
 8000652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000656:	0112      	lsls	r2, r2, #4
 8000658:	b2d2      	uxtb	r2, r2
 800065a:	440b      	add	r3, r1
 800065c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000660:	e00a      	b.n	8000678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4908      	ldr	r1, [pc, #32]	; (8000688 <__NVIC_SetPriority+0x50>)
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	f003 030f 	and.w	r3, r3, #15
 800066e:	3b04      	subs	r3, #4
 8000670:	0112      	lsls	r2, r2, #4
 8000672:	b2d2      	uxtb	r2, r2
 8000674:	440b      	add	r3, r1
 8000676:	761a      	strb	r2, [r3, #24]
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000e100 	.word	0xe000e100
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800068c:	b480      	push	{r7}
 800068e:	b089      	sub	sp, #36	; 0x24
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	f003 0307 	and.w	r3, r3, #7
 800069e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a0:	69fb      	ldr	r3, [r7, #28]
 80006a2:	f1c3 0307 	rsb	r3, r3, #7
 80006a6:	2b04      	cmp	r3, #4
 80006a8:	bf28      	it	cs
 80006aa:	2304      	movcs	r3, #4
 80006ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ae:	69fb      	ldr	r3, [r7, #28]
 80006b0:	3304      	adds	r3, #4
 80006b2:	2b06      	cmp	r3, #6
 80006b4:	d902      	bls.n	80006bc <NVIC_EncodePriority+0x30>
 80006b6:	69fb      	ldr	r3, [r7, #28]
 80006b8:	3b03      	subs	r3, #3
 80006ba:	e000      	b.n	80006be <NVIC_EncodePriority+0x32>
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c0:	f04f 32ff 	mov.w	r2, #4294967295
 80006c4:	69bb      	ldr	r3, [r7, #24]
 80006c6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ca:	43da      	mvns	r2, r3
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	401a      	ands	r2, r3
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006d4:	f04f 31ff 	mov.w	r1, #4294967295
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	fa01 f303 	lsl.w	r3, r1, r3
 80006de:	43d9      	mvns	r1, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e4:	4313      	orrs	r3, r2
         );
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3724      	adds	r7, #36	; 0x24
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr

080006f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	3b01      	subs	r3, #1
 80006fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000700:	d301      	bcc.n	8000706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000702:	2301      	movs	r3, #1
 8000704:	e00f      	b.n	8000726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000706:	4a0a      	ldr	r2, [pc, #40]	; (8000730 <SysTick_Config+0x40>)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	3b01      	subs	r3, #1
 800070c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800070e:	210f      	movs	r1, #15
 8000710:	f04f 30ff 	mov.w	r0, #4294967295
 8000714:	f7ff ff90 	bl	8000638 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000718:	4b05      	ldr	r3, [pc, #20]	; (8000730 <SysTick_Config+0x40>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800071e:	4b04      	ldr	r3, [pc, #16]	; (8000730 <SysTick_Config+0x40>)
 8000720:	2207      	movs	r2, #7
 8000722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000724:	2300      	movs	r3, #0
}
 8000726:	4618      	mov	r0, r3
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	e000e010 	.word	0xe000e010

08000734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff ff2d 	bl	800059c <__NVIC_SetPriorityGrouping>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}

0800074a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800074a:	b580      	push	{r7, lr}
 800074c:	b086      	sub	sp, #24
 800074e:	af00      	add	r7, sp, #0
 8000750:	4603      	mov	r3, r0
 8000752:	60b9      	str	r1, [r7, #8]
 8000754:	607a      	str	r2, [r7, #4]
 8000756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800075c:	f7ff ff42 	bl	80005e4 <__NVIC_GetPriorityGrouping>
 8000760:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	68b9      	ldr	r1, [r7, #8]
 8000766:	6978      	ldr	r0, [r7, #20]
 8000768:	f7ff ff90 	bl	800068c <NVIC_EncodePriority>
 800076c:	4602      	mov	r2, r0
 800076e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000772:	4611      	mov	r1, r2
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff ff5f 	bl	8000638 <__NVIC_SetPriority>
}
 800077a:	bf00      	nop
 800077c:	3718      	adds	r7, #24
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	b082      	sub	sp, #8
 8000786:	af00      	add	r7, sp, #0
 8000788:	4603      	mov	r3, r0
 800078a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800078c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff ff35 	bl	8000600 <__NVIC_EnableIRQ>
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	b082      	sub	sp, #8
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f7ff ffa2 	bl	80006f0 <SysTick_Config>
 80007ac:	4603      	mov	r3, r0
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b08b      	sub	sp, #44	; 0x2c
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007c2:	2300      	movs	r3, #0
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80007c6:	2300      	movs	r3, #0
 80007c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007ca:	e169      	b.n	8000aa0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80007cc:	2201      	movs	r2, #1
 80007ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d0:	fa02 f303 	lsl.w	r3, r2, r3
 80007d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	69fa      	ldr	r2, [r7, #28]
 80007dc:	4013      	ands	r3, r2
 80007de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80007e0:	69ba      	ldr	r2, [r7, #24]
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	f040 8158 	bne.w	8000a9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	4a9a      	ldr	r2, [pc, #616]	; (8000a58 <HAL_GPIO_Init+0x2a0>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d05e      	beq.n	80008b2 <HAL_GPIO_Init+0xfa>
 80007f4:	4a98      	ldr	r2, [pc, #608]	; (8000a58 <HAL_GPIO_Init+0x2a0>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d875      	bhi.n	80008e6 <HAL_GPIO_Init+0x12e>
 80007fa:	4a98      	ldr	r2, [pc, #608]	; (8000a5c <HAL_GPIO_Init+0x2a4>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d058      	beq.n	80008b2 <HAL_GPIO_Init+0xfa>
 8000800:	4a96      	ldr	r2, [pc, #600]	; (8000a5c <HAL_GPIO_Init+0x2a4>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d86f      	bhi.n	80008e6 <HAL_GPIO_Init+0x12e>
 8000806:	4a96      	ldr	r2, [pc, #600]	; (8000a60 <HAL_GPIO_Init+0x2a8>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d052      	beq.n	80008b2 <HAL_GPIO_Init+0xfa>
 800080c:	4a94      	ldr	r2, [pc, #592]	; (8000a60 <HAL_GPIO_Init+0x2a8>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d869      	bhi.n	80008e6 <HAL_GPIO_Init+0x12e>
 8000812:	4a94      	ldr	r2, [pc, #592]	; (8000a64 <HAL_GPIO_Init+0x2ac>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d04c      	beq.n	80008b2 <HAL_GPIO_Init+0xfa>
 8000818:	4a92      	ldr	r2, [pc, #584]	; (8000a64 <HAL_GPIO_Init+0x2ac>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d863      	bhi.n	80008e6 <HAL_GPIO_Init+0x12e>
 800081e:	4a92      	ldr	r2, [pc, #584]	; (8000a68 <HAL_GPIO_Init+0x2b0>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d046      	beq.n	80008b2 <HAL_GPIO_Init+0xfa>
 8000824:	4a90      	ldr	r2, [pc, #576]	; (8000a68 <HAL_GPIO_Init+0x2b0>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d85d      	bhi.n	80008e6 <HAL_GPIO_Init+0x12e>
 800082a:	2b12      	cmp	r3, #18
 800082c:	d82a      	bhi.n	8000884 <HAL_GPIO_Init+0xcc>
 800082e:	2b12      	cmp	r3, #18
 8000830:	d859      	bhi.n	80008e6 <HAL_GPIO_Init+0x12e>
 8000832:	a201      	add	r2, pc, #4	; (adr r2, 8000838 <HAL_GPIO_Init+0x80>)
 8000834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000838:	080008b3 	.word	0x080008b3
 800083c:	0800088d 	.word	0x0800088d
 8000840:	0800089f 	.word	0x0800089f
 8000844:	080008e1 	.word	0x080008e1
 8000848:	080008e7 	.word	0x080008e7
 800084c:	080008e7 	.word	0x080008e7
 8000850:	080008e7 	.word	0x080008e7
 8000854:	080008e7 	.word	0x080008e7
 8000858:	080008e7 	.word	0x080008e7
 800085c:	080008e7 	.word	0x080008e7
 8000860:	080008e7 	.word	0x080008e7
 8000864:	080008e7 	.word	0x080008e7
 8000868:	080008e7 	.word	0x080008e7
 800086c:	080008e7 	.word	0x080008e7
 8000870:	080008e7 	.word	0x080008e7
 8000874:	080008e7 	.word	0x080008e7
 8000878:	080008e7 	.word	0x080008e7
 800087c:	08000895 	.word	0x08000895
 8000880:	080008a9 	.word	0x080008a9
 8000884:	4a79      	ldr	r2, [pc, #484]	; (8000a6c <HAL_GPIO_Init+0x2b4>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d013      	beq.n	80008b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800088a:	e02c      	b.n	80008e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	623b      	str	r3, [r7, #32]
          break;
 8000892:	e029      	b.n	80008e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	3304      	adds	r3, #4
 800089a:	623b      	str	r3, [r7, #32]
          break;
 800089c:	e024      	b.n	80008e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	68db      	ldr	r3, [r3, #12]
 80008a2:	3308      	adds	r3, #8
 80008a4:	623b      	str	r3, [r7, #32]
          break;
 80008a6:	e01f      	b.n	80008e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	330c      	adds	r3, #12
 80008ae:	623b      	str	r3, [r7, #32]
          break;
 80008b0:	e01a      	b.n	80008e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d102      	bne.n	80008c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008ba:	2304      	movs	r3, #4
 80008bc:	623b      	str	r3, [r7, #32]
          break;
 80008be:	e013      	b.n	80008e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d105      	bne.n	80008d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008c8:	2308      	movs	r3, #8
 80008ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	69fa      	ldr	r2, [r7, #28]
 80008d0:	611a      	str	r2, [r3, #16]
          break;
 80008d2:	e009      	b.n	80008e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008d4:	2308      	movs	r3, #8
 80008d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	69fa      	ldr	r2, [r7, #28]
 80008dc:	615a      	str	r2, [r3, #20]
          break;
 80008de:	e003      	b.n	80008e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008e0:	2300      	movs	r3, #0
 80008e2:	623b      	str	r3, [r7, #32]
          break;
 80008e4:	e000      	b.n	80008e8 <HAL_GPIO_Init+0x130>
          break;
 80008e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	2bff      	cmp	r3, #255	; 0xff
 80008ec:	d801      	bhi.n	80008f2 <HAL_GPIO_Init+0x13a>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	e001      	b.n	80008f6 <HAL_GPIO_Init+0x13e>
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	3304      	adds	r3, #4
 80008f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80008f8:	69bb      	ldr	r3, [r7, #24]
 80008fa:	2bff      	cmp	r3, #255	; 0xff
 80008fc:	d802      	bhi.n	8000904 <HAL_GPIO_Init+0x14c>
 80008fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	e002      	b.n	800090a <HAL_GPIO_Init+0x152>
 8000904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000906:	3b08      	subs	r3, #8
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	210f      	movs	r1, #15
 8000912:	693b      	ldr	r3, [r7, #16]
 8000914:	fa01 f303 	lsl.w	r3, r1, r3
 8000918:	43db      	mvns	r3, r3
 800091a:	401a      	ands	r2, r3
 800091c:	6a39      	ldr	r1, [r7, #32]
 800091e:	693b      	ldr	r3, [r7, #16]
 8000920:	fa01 f303 	lsl.w	r3, r1, r3
 8000924:	431a      	orrs	r2, r3
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000932:	2b00      	cmp	r3, #0
 8000934:	f000 80b1 	beq.w	8000a9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000938:	4b4d      	ldr	r3, [pc, #308]	; (8000a70 <HAL_GPIO_Init+0x2b8>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	4a4c      	ldr	r2, [pc, #304]	; (8000a70 <HAL_GPIO_Init+0x2b8>)
 800093e:	f043 0301 	orr.w	r3, r3, #1
 8000942:	6193      	str	r3, [r2, #24]
 8000944:	4b4a      	ldr	r3, [pc, #296]	; (8000a70 <HAL_GPIO_Init+0x2b8>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000950:	4a48      	ldr	r2, [pc, #288]	; (8000a74 <HAL_GPIO_Init+0x2bc>)
 8000952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000954:	089b      	lsrs	r3, r3, #2
 8000956:	3302      	adds	r3, #2
 8000958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800095c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800095e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000960:	f003 0303 	and.w	r3, r3, #3
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	220f      	movs	r2, #15
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	43db      	mvns	r3, r3
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	4013      	ands	r3, r2
 8000972:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4a40      	ldr	r2, [pc, #256]	; (8000a78 <HAL_GPIO_Init+0x2c0>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d013      	beq.n	80009a4 <HAL_GPIO_Init+0x1ec>
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4a3f      	ldr	r2, [pc, #252]	; (8000a7c <HAL_GPIO_Init+0x2c4>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d00d      	beq.n	80009a0 <HAL_GPIO_Init+0x1e8>
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4a3e      	ldr	r2, [pc, #248]	; (8000a80 <HAL_GPIO_Init+0x2c8>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d007      	beq.n	800099c <HAL_GPIO_Init+0x1e4>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4a3d      	ldr	r2, [pc, #244]	; (8000a84 <HAL_GPIO_Init+0x2cc>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d101      	bne.n	8000998 <HAL_GPIO_Init+0x1e0>
 8000994:	2303      	movs	r3, #3
 8000996:	e006      	b.n	80009a6 <HAL_GPIO_Init+0x1ee>
 8000998:	2304      	movs	r3, #4
 800099a:	e004      	b.n	80009a6 <HAL_GPIO_Init+0x1ee>
 800099c:	2302      	movs	r3, #2
 800099e:	e002      	b.n	80009a6 <HAL_GPIO_Init+0x1ee>
 80009a0:	2301      	movs	r3, #1
 80009a2:	e000      	b.n	80009a6 <HAL_GPIO_Init+0x1ee>
 80009a4:	2300      	movs	r3, #0
 80009a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009a8:	f002 0203 	and.w	r2, r2, #3
 80009ac:	0092      	lsls	r2, r2, #2
 80009ae:	4093      	lsls	r3, r2
 80009b0:	68fa      	ldr	r2, [r7, #12]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009b6:	492f      	ldr	r1, [pc, #188]	; (8000a74 <HAL_GPIO_Init+0x2bc>)
 80009b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ba:	089b      	lsrs	r3, r3, #2
 80009bc:	3302      	adds	r3, #2
 80009be:	68fa      	ldr	r2, [r7, #12]
 80009c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d006      	beq.n	80009de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80009d0:	4b2d      	ldr	r3, [pc, #180]	; (8000a88 <HAL_GPIO_Init+0x2d0>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	492c      	ldr	r1, [pc, #176]	; (8000a88 <HAL_GPIO_Init+0x2d0>)
 80009d6:	69bb      	ldr	r3, [r7, #24]
 80009d8:	4313      	orrs	r3, r2
 80009da:	600b      	str	r3, [r1, #0]
 80009dc:	e006      	b.n	80009ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80009de:	4b2a      	ldr	r3, [pc, #168]	; (8000a88 <HAL_GPIO_Init+0x2d0>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	69bb      	ldr	r3, [r7, #24]
 80009e4:	43db      	mvns	r3, r3
 80009e6:	4928      	ldr	r1, [pc, #160]	; (8000a88 <HAL_GPIO_Init+0x2d0>)
 80009e8:	4013      	ands	r3, r2
 80009ea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d006      	beq.n	8000a06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80009f8:	4b23      	ldr	r3, [pc, #140]	; (8000a88 <HAL_GPIO_Init+0x2d0>)
 80009fa:	685a      	ldr	r2, [r3, #4]
 80009fc:	4922      	ldr	r1, [pc, #136]	; (8000a88 <HAL_GPIO_Init+0x2d0>)
 80009fe:	69bb      	ldr	r3, [r7, #24]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	604b      	str	r3, [r1, #4]
 8000a04:	e006      	b.n	8000a14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a06:	4b20      	ldr	r3, [pc, #128]	; (8000a88 <HAL_GPIO_Init+0x2d0>)
 8000a08:	685a      	ldr	r2, [r3, #4]
 8000a0a:	69bb      	ldr	r3, [r7, #24]
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	491e      	ldr	r1, [pc, #120]	; (8000a88 <HAL_GPIO_Init+0x2d0>)
 8000a10:	4013      	ands	r3, r2
 8000a12:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d006      	beq.n	8000a2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a20:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <HAL_GPIO_Init+0x2d0>)
 8000a22:	689a      	ldr	r2, [r3, #8]
 8000a24:	4918      	ldr	r1, [pc, #96]	; (8000a88 <HAL_GPIO_Init+0x2d0>)
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	608b      	str	r3, [r1, #8]
 8000a2c:	e006      	b.n	8000a3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a2e:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <HAL_GPIO_Init+0x2d0>)
 8000a30:	689a      	ldr	r2, [r3, #8]
 8000a32:	69bb      	ldr	r3, [r7, #24]
 8000a34:	43db      	mvns	r3, r3
 8000a36:	4914      	ldr	r1, [pc, #80]	; (8000a88 <HAL_GPIO_Init+0x2d0>)
 8000a38:	4013      	ands	r3, r2
 8000a3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d021      	beq.n	8000a8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a48:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <HAL_GPIO_Init+0x2d0>)
 8000a4a:	68da      	ldr	r2, [r3, #12]
 8000a4c:	490e      	ldr	r1, [pc, #56]	; (8000a88 <HAL_GPIO_Init+0x2d0>)
 8000a4e:	69bb      	ldr	r3, [r7, #24]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	60cb      	str	r3, [r1, #12]
 8000a54:	e021      	b.n	8000a9a <HAL_GPIO_Init+0x2e2>
 8000a56:	bf00      	nop
 8000a58:	10320000 	.word	0x10320000
 8000a5c:	10310000 	.word	0x10310000
 8000a60:	10220000 	.word	0x10220000
 8000a64:	10210000 	.word	0x10210000
 8000a68:	10120000 	.word	0x10120000
 8000a6c:	10110000 	.word	0x10110000
 8000a70:	40021000 	.word	0x40021000
 8000a74:	40010000 	.word	0x40010000
 8000a78:	40010800 	.word	0x40010800
 8000a7c:	40010c00 	.word	0x40010c00
 8000a80:	40011000 	.word	0x40011000
 8000a84:	40011400 	.word	0x40011400
 8000a88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <HAL_GPIO_Init+0x304>)
 8000a8e:	68da      	ldr	r2, [r3, #12]
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	43db      	mvns	r3, r3
 8000a94:	4909      	ldr	r1, [pc, #36]	; (8000abc <HAL_GPIO_Init+0x304>)
 8000a96:	4013      	ands	r3, r2
 8000a98:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	f47f ae8e 	bne.w	80007cc <HAL_GPIO_Init+0x14>
  }
}
 8000ab0:	bf00      	nop
 8000ab2:	bf00      	nop
 8000ab4:	372c      	adds	r7, #44	; 0x2c
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr
 8000abc:	40010400 	.word	0x40010400

08000ac0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d101      	bne.n	8000ad2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e272      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	f000 8087 	beq.w	8000bee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ae0:	4b92      	ldr	r3, [pc, #584]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f003 030c 	and.w	r3, r3, #12
 8000ae8:	2b04      	cmp	r3, #4
 8000aea:	d00c      	beq.n	8000b06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000aec:	4b8f      	ldr	r3, [pc, #572]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f003 030c 	and.w	r3, r3, #12
 8000af4:	2b08      	cmp	r3, #8
 8000af6:	d112      	bne.n	8000b1e <HAL_RCC_OscConfig+0x5e>
 8000af8:	4b8c      	ldr	r3, [pc, #560]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b04:	d10b      	bne.n	8000b1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b06:	4b89      	ldr	r3, [pc, #548]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d06c      	beq.n	8000bec <HAL_RCC_OscConfig+0x12c>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d168      	bne.n	8000bec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e24c      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b26:	d106      	bne.n	8000b36 <HAL_RCC_OscConfig+0x76>
 8000b28:	4b80      	ldr	r3, [pc, #512]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a7f      	ldr	r2, [pc, #508]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b32:	6013      	str	r3, [r2, #0]
 8000b34:	e02e      	b.n	8000b94 <HAL_RCC_OscConfig+0xd4>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d10c      	bne.n	8000b58 <HAL_RCC_OscConfig+0x98>
 8000b3e:	4b7b      	ldr	r3, [pc, #492]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a7a      	ldr	r2, [pc, #488]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b48:	6013      	str	r3, [r2, #0]
 8000b4a:	4b78      	ldr	r3, [pc, #480]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a77      	ldr	r2, [pc, #476]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b54:	6013      	str	r3, [r2, #0]
 8000b56:	e01d      	b.n	8000b94 <HAL_RCC_OscConfig+0xd4>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b60:	d10c      	bne.n	8000b7c <HAL_RCC_OscConfig+0xbc>
 8000b62:	4b72      	ldr	r3, [pc, #456]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a71      	ldr	r2, [pc, #452]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b6c:	6013      	str	r3, [r2, #0]
 8000b6e:	4b6f      	ldr	r3, [pc, #444]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a6e      	ldr	r2, [pc, #440]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b78:	6013      	str	r3, [r2, #0]
 8000b7a:	e00b      	b.n	8000b94 <HAL_RCC_OscConfig+0xd4>
 8000b7c:	4b6b      	ldr	r3, [pc, #428]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a6a      	ldr	r2, [pc, #424]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b86:	6013      	str	r3, [r2, #0]
 8000b88:	4b68      	ldr	r3, [pc, #416]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a67      	ldr	r2, [pc, #412]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d013      	beq.n	8000bc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b9c:	f7ff fcf4 	bl	8000588 <HAL_GetTick>
 8000ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ba2:	e008      	b.n	8000bb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ba4:	f7ff fcf0 	bl	8000588 <HAL_GetTick>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	2b64      	cmp	r3, #100	; 0x64
 8000bb0:	d901      	bls.n	8000bb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	e200      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bb6:	4b5d      	ldr	r3, [pc, #372]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d0f0      	beq.n	8000ba4 <HAL_RCC_OscConfig+0xe4>
 8000bc2:	e014      	b.n	8000bee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bc4:	f7ff fce0 	bl	8000588 <HAL_GetTick>
 8000bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bca:	e008      	b.n	8000bde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bcc:	f7ff fcdc 	bl	8000588 <HAL_GetTick>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	2b64      	cmp	r3, #100	; 0x64
 8000bd8:	d901      	bls.n	8000bde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	e1ec      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bde:	4b53      	ldr	r3, [pc, #332]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d1f0      	bne.n	8000bcc <HAL_RCC_OscConfig+0x10c>
 8000bea:	e000      	b.n	8000bee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d063      	beq.n	8000cc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000bfa:	4b4c      	ldr	r3, [pc, #304]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f003 030c 	and.w	r3, r3, #12
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d00b      	beq.n	8000c1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c06:	4b49      	ldr	r3, [pc, #292]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f003 030c 	and.w	r3, r3, #12
 8000c0e:	2b08      	cmp	r3, #8
 8000c10:	d11c      	bne.n	8000c4c <HAL_RCC_OscConfig+0x18c>
 8000c12:	4b46      	ldr	r3, [pc, #280]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d116      	bne.n	8000c4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c1e:	4b43      	ldr	r3, [pc, #268]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d005      	beq.n	8000c36 <HAL_RCC_OscConfig+0x176>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	691b      	ldr	r3, [r3, #16]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d001      	beq.n	8000c36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e1c0      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c36:	4b3d      	ldr	r3, [pc, #244]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	00db      	lsls	r3, r3, #3
 8000c44:	4939      	ldr	r1, [pc, #228]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000c46:	4313      	orrs	r3, r2
 8000c48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c4a:	e03a      	b.n	8000cc2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	691b      	ldr	r3, [r3, #16]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d020      	beq.n	8000c96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c54:	4b36      	ldr	r3, [pc, #216]	; (8000d30 <HAL_RCC_OscConfig+0x270>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c5a:	f7ff fc95 	bl	8000588 <HAL_GetTick>
 8000c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c60:	e008      	b.n	8000c74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c62:	f7ff fc91 	bl	8000588 <HAL_GetTick>
 8000c66:	4602      	mov	r2, r0
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	1ad3      	subs	r3, r2, r3
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d901      	bls.n	8000c74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000c70:	2303      	movs	r3, #3
 8000c72:	e1a1      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c74:	4b2d      	ldr	r3, [pc, #180]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f003 0302 	and.w	r3, r3, #2
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d0f0      	beq.n	8000c62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c80:	4b2a      	ldr	r3, [pc, #168]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	695b      	ldr	r3, [r3, #20]
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	4927      	ldr	r1, [pc, #156]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000c90:	4313      	orrs	r3, r2
 8000c92:	600b      	str	r3, [r1, #0]
 8000c94:	e015      	b.n	8000cc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c96:	4b26      	ldr	r3, [pc, #152]	; (8000d30 <HAL_RCC_OscConfig+0x270>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c9c:	f7ff fc74 	bl	8000588 <HAL_GetTick>
 8000ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ca2:	e008      	b.n	8000cb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ca4:	f7ff fc70 	bl	8000588 <HAL_GetTick>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d901      	bls.n	8000cb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	e180      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d1f0      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 0308 	and.w	r3, r3, #8
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d03a      	beq.n	8000d44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d019      	beq.n	8000d0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cd6:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <HAL_RCC_OscConfig+0x274>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cdc:	f7ff fc54 	bl	8000588 <HAL_GetTick>
 8000ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ce2:	e008      	b.n	8000cf6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ce4:	f7ff fc50 	bl	8000588 <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d901      	bls.n	8000cf6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	e160      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d0f0      	beq.n	8000ce4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d02:	2001      	movs	r0, #1
 8000d04:	f000 faa6 	bl	8001254 <RCC_Delay>
 8000d08:	e01c      	b.n	8000d44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <HAL_RCC_OscConfig+0x274>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d10:	f7ff fc3a 	bl	8000588 <HAL_GetTick>
 8000d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d16:	e00f      	b.n	8000d38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d18:	f7ff fc36 	bl	8000588 <HAL_GetTick>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d908      	bls.n	8000d38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d26:	2303      	movs	r3, #3
 8000d28:	e146      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
 8000d2a:	bf00      	nop
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	42420000 	.word	0x42420000
 8000d34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d38:	4b92      	ldr	r3, [pc, #584]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3c:	f003 0302 	and.w	r3, r3, #2
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d1e9      	bne.n	8000d18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 0304 	and.w	r3, r3, #4
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	f000 80a6 	beq.w	8000e9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d52:	2300      	movs	r3, #0
 8000d54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d56:	4b8b      	ldr	r3, [pc, #556]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d10d      	bne.n	8000d7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d62:	4b88      	ldr	r3, [pc, #544]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	4a87      	ldr	r2, [pc, #540]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d6c:	61d3      	str	r3, [r2, #28]
 8000d6e:	4b85      	ldr	r3, [pc, #532]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000d70:	69db      	ldr	r3, [r3, #28]
 8000d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d7e:	4b82      	ldr	r3, [pc, #520]	; (8000f88 <HAL_RCC_OscConfig+0x4c8>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d118      	bne.n	8000dbc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d8a:	4b7f      	ldr	r3, [pc, #508]	; (8000f88 <HAL_RCC_OscConfig+0x4c8>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a7e      	ldr	r2, [pc, #504]	; (8000f88 <HAL_RCC_OscConfig+0x4c8>)
 8000d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d96:	f7ff fbf7 	bl	8000588 <HAL_GetTick>
 8000d9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d9c:	e008      	b.n	8000db0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d9e:	f7ff fbf3 	bl	8000588 <HAL_GetTick>
 8000da2:	4602      	mov	r2, r0
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	2b64      	cmp	r3, #100	; 0x64
 8000daa:	d901      	bls.n	8000db0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000dac:	2303      	movs	r3, #3
 8000dae:	e103      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000db0:	4b75      	ldr	r3, [pc, #468]	; (8000f88 <HAL_RCC_OscConfig+0x4c8>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d0f0      	beq.n	8000d9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d106      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x312>
 8000dc4:	4b6f      	ldr	r3, [pc, #444]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000dc6:	6a1b      	ldr	r3, [r3, #32]
 8000dc8:	4a6e      	ldr	r2, [pc, #440]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000dca:	f043 0301 	orr.w	r3, r3, #1
 8000dce:	6213      	str	r3, [r2, #32]
 8000dd0:	e02d      	b.n	8000e2e <HAL_RCC_OscConfig+0x36e>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d10c      	bne.n	8000df4 <HAL_RCC_OscConfig+0x334>
 8000dda:	4b6a      	ldr	r3, [pc, #424]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000ddc:	6a1b      	ldr	r3, [r3, #32]
 8000dde:	4a69      	ldr	r2, [pc, #420]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000de0:	f023 0301 	bic.w	r3, r3, #1
 8000de4:	6213      	str	r3, [r2, #32]
 8000de6:	4b67      	ldr	r3, [pc, #412]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000de8:	6a1b      	ldr	r3, [r3, #32]
 8000dea:	4a66      	ldr	r2, [pc, #408]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000dec:	f023 0304 	bic.w	r3, r3, #4
 8000df0:	6213      	str	r3, [r2, #32]
 8000df2:	e01c      	b.n	8000e2e <HAL_RCC_OscConfig+0x36e>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	2b05      	cmp	r3, #5
 8000dfa:	d10c      	bne.n	8000e16 <HAL_RCC_OscConfig+0x356>
 8000dfc:	4b61      	ldr	r3, [pc, #388]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000dfe:	6a1b      	ldr	r3, [r3, #32]
 8000e00:	4a60      	ldr	r2, [pc, #384]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	6213      	str	r3, [r2, #32]
 8000e08:	4b5e      	ldr	r3, [pc, #376]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e0a:	6a1b      	ldr	r3, [r3, #32]
 8000e0c:	4a5d      	ldr	r2, [pc, #372]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	6213      	str	r3, [r2, #32]
 8000e14:	e00b      	b.n	8000e2e <HAL_RCC_OscConfig+0x36e>
 8000e16:	4b5b      	ldr	r3, [pc, #364]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e18:	6a1b      	ldr	r3, [r3, #32]
 8000e1a:	4a5a      	ldr	r2, [pc, #360]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e1c:	f023 0301 	bic.w	r3, r3, #1
 8000e20:	6213      	str	r3, [r2, #32]
 8000e22:	4b58      	ldr	r3, [pc, #352]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e24:	6a1b      	ldr	r3, [r3, #32]
 8000e26:	4a57      	ldr	r2, [pc, #348]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e28:	f023 0304 	bic.w	r3, r3, #4
 8000e2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d015      	beq.n	8000e62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e36:	f7ff fba7 	bl	8000588 <HAL_GetTick>
 8000e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e3c:	e00a      	b.n	8000e54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e3e:	f7ff fba3 	bl	8000588 <HAL_GetTick>
 8000e42:	4602      	mov	r2, r0
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d901      	bls.n	8000e54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000e50:	2303      	movs	r3, #3
 8000e52:	e0b1      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e54:	4b4b      	ldr	r3, [pc, #300]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e56:	6a1b      	ldr	r3, [r3, #32]
 8000e58:	f003 0302 	and.w	r3, r3, #2
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d0ee      	beq.n	8000e3e <HAL_RCC_OscConfig+0x37e>
 8000e60:	e014      	b.n	8000e8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e62:	f7ff fb91 	bl	8000588 <HAL_GetTick>
 8000e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e68:	e00a      	b.n	8000e80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e6a:	f7ff fb8d 	bl	8000588 <HAL_GetTick>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d901      	bls.n	8000e80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	e09b      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e80:	4b40      	ldr	r3, [pc, #256]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e82:	6a1b      	ldr	r3, [r3, #32]
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1ee      	bne.n	8000e6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000e8c:	7dfb      	ldrb	r3, [r7, #23]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d105      	bne.n	8000e9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e92:	4b3c      	ldr	r3, [pc, #240]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	4a3b      	ldr	r2, [pc, #236]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f000 8087 	beq.w	8000fb6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ea8:	4b36      	ldr	r3, [pc, #216]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 030c 	and.w	r3, r3, #12
 8000eb0:	2b08      	cmp	r3, #8
 8000eb2:	d061      	beq.n	8000f78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	69db      	ldr	r3, [r3, #28]
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d146      	bne.n	8000f4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ebc:	4b33      	ldr	r3, [pc, #204]	; (8000f8c <HAL_RCC_OscConfig+0x4cc>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec2:	f7ff fb61 	bl	8000588 <HAL_GetTick>
 8000ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ec8:	e008      	b.n	8000edc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000eca:	f7ff fb5d 	bl	8000588 <HAL_GetTick>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d901      	bls.n	8000edc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	e06d      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000edc:	4b29      	ldr	r3, [pc, #164]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1f0      	bne.n	8000eca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a1b      	ldr	r3, [r3, #32]
 8000eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ef0:	d108      	bne.n	8000f04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ef2:	4b24      	ldr	r3, [pc, #144]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	4921      	ldr	r1, [pc, #132]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000f00:	4313      	orrs	r3, r2
 8000f02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f04:	4b1f      	ldr	r3, [pc, #124]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a19      	ldr	r1, [r3, #32]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f14:	430b      	orrs	r3, r1
 8000f16:	491b      	ldr	r1, [pc, #108]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <HAL_RCC_OscConfig+0x4cc>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f22:	f7ff fb31 	bl	8000588 <HAL_GetTick>
 8000f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f28:	e008      	b.n	8000f3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f2a:	f7ff fb2d 	bl	8000588 <HAL_GetTick>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d901      	bls.n	8000f3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	e03d      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d0f0      	beq.n	8000f2a <HAL_RCC_OscConfig+0x46a>
 8000f48:	e035      	b.n	8000fb6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <HAL_RCC_OscConfig+0x4cc>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f50:	f7ff fb1a 	bl	8000588 <HAL_GetTick>
 8000f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f56:	e008      	b.n	8000f6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f58:	f7ff fb16 	bl	8000588 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d901      	bls.n	8000f6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	e026      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1f0      	bne.n	8000f58 <HAL_RCC_OscConfig+0x498>
 8000f76:	e01e      	b.n	8000fb6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	69db      	ldr	r3, [r3, #28]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d107      	bne.n	8000f90 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e019      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
 8000f84:	40021000 	.word	0x40021000
 8000f88:	40007000 	.word	0x40007000
 8000f8c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000f90:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <HAL_RCC_OscConfig+0x500>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6a1b      	ldr	r3, [r3, #32]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d106      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d001      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3718      	adds	r7, #24
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40021000 	.word	0x40021000

08000fc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d101      	bne.n	8000fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e0d0      	b.n	800117a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000fd8:	4b6a      	ldr	r3, [pc, #424]	; (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0307 	and.w	r3, r3, #7
 8000fe0:	683a      	ldr	r2, [r7, #0]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d910      	bls.n	8001008 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fe6:	4b67      	ldr	r3, [pc, #412]	; (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f023 0207 	bic.w	r2, r3, #7
 8000fee:	4965      	ldr	r1, [pc, #404]	; (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ff6:	4b63      	ldr	r3, [pc, #396]	; (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	683a      	ldr	r2, [r7, #0]
 8001000:	429a      	cmp	r2, r3
 8001002:	d001      	beq.n	8001008 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e0b8      	b.n	800117a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	2b00      	cmp	r3, #0
 8001012:	d020      	beq.n	8001056 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 0304 	and.w	r3, r3, #4
 800101c:	2b00      	cmp	r3, #0
 800101e:	d005      	beq.n	800102c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001020:	4b59      	ldr	r3, [pc, #356]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	4a58      	ldr	r2, [pc, #352]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001026:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800102a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0308 	and.w	r3, r3, #8
 8001034:	2b00      	cmp	r3, #0
 8001036:	d005      	beq.n	8001044 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001038:	4b53      	ldr	r3, [pc, #332]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	4a52      	ldr	r2, [pc, #328]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 800103e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001042:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001044:	4b50      	ldr	r3, [pc, #320]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	494d      	ldr	r1, [pc, #308]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001052:	4313      	orrs	r3, r2
 8001054:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	2b00      	cmp	r3, #0
 8001060:	d040      	beq.n	80010e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d107      	bne.n	800107a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800106a:	4b47      	ldr	r3, [pc, #284]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d115      	bne.n	80010a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e07f      	b.n	800117a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2b02      	cmp	r3, #2
 8001080:	d107      	bne.n	8001092 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001082:	4b41      	ldr	r3, [pc, #260]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d109      	bne.n	80010a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e073      	b.n	800117a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001092:	4b3d      	ldr	r3, [pc, #244]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d101      	bne.n	80010a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e06b      	b.n	800117a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010a2:	4b39      	ldr	r3, [pc, #228]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f023 0203 	bic.w	r2, r3, #3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	4936      	ldr	r1, [pc, #216]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 80010b0:	4313      	orrs	r3, r2
 80010b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010b4:	f7ff fa68 	bl	8000588 <HAL_GetTick>
 80010b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010ba:	e00a      	b.n	80010d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010bc:	f7ff fa64 	bl	8000588 <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d901      	bls.n	80010d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e053      	b.n	800117a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010d2:	4b2d      	ldr	r3, [pc, #180]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 020c 	and.w	r2, r3, #12
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d1eb      	bne.n	80010bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80010e4:	4b27      	ldr	r3, [pc, #156]	; (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d210      	bcs.n	8001114 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010f2:	4b24      	ldr	r3, [pc, #144]	; (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f023 0207 	bic.w	r2, r3, #7
 80010fa:	4922      	ldr	r1, [pc, #136]	; (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	4313      	orrs	r3, r2
 8001100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001102:	4b20      	ldr	r3, [pc, #128]	; (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	429a      	cmp	r2, r3
 800110e:	d001      	beq.n	8001114 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e032      	b.n	800117a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	2b00      	cmp	r3, #0
 800111e:	d008      	beq.n	8001132 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001120:	4b19      	ldr	r3, [pc, #100]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	4916      	ldr	r1, [pc, #88]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 800112e:	4313      	orrs	r3, r2
 8001130:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	2b00      	cmp	r3, #0
 800113c:	d009      	beq.n	8001152 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800113e:	4b12      	ldr	r3, [pc, #72]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	490e      	ldr	r1, [pc, #56]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 800114e:	4313      	orrs	r3, r2
 8001150:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001152:	f000 f821 	bl	8001198 <HAL_RCC_GetSysClockFreq>
 8001156:	4602      	mov	r2, r0
 8001158:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	091b      	lsrs	r3, r3, #4
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	490a      	ldr	r1, [pc, #40]	; (800118c <HAL_RCC_ClockConfig+0x1c8>)
 8001164:	5ccb      	ldrb	r3, [r1, r3]
 8001166:	fa22 f303 	lsr.w	r3, r2, r3
 800116a:	4a09      	ldr	r2, [pc, #36]	; (8001190 <HAL_RCC_ClockConfig+0x1cc>)
 800116c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <HAL_RCC_ClockConfig+0x1d0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f9c6 	bl	8000504 <HAL_InitTick>

  return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40022000 	.word	0x40022000
 8001188:	40021000 	.word	0x40021000
 800118c:	08001ad8 	.word	0x08001ad8
 8001190:	20000000 	.word	0x20000000
 8001194:	20000004 	.word	0x20000004

08001198 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001198:	b490      	push	{r4, r7}
 800119a:	b08a      	sub	sp, #40	; 0x28
 800119c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800119e:	4b29      	ldr	r3, [pc, #164]	; (8001244 <HAL_RCC_GetSysClockFreq+0xac>)
 80011a0:	1d3c      	adds	r4, r7, #4
 80011a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011a8:	f240 2301 	movw	r3, #513	; 0x201
 80011ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
 80011b2:	2300      	movs	r3, #0
 80011b4:	61bb      	str	r3, [r7, #24]
 80011b6:	2300      	movs	r3, #0
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80011be:	2300      	movs	r3, #0
 80011c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80011c2:	4b21      	ldr	r3, [pc, #132]	; (8001248 <HAL_RCC_GetSysClockFreq+0xb0>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f003 030c 	and.w	r3, r3, #12
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	d002      	beq.n	80011d8 <HAL_RCC_GetSysClockFreq+0x40>
 80011d2:	2b08      	cmp	r3, #8
 80011d4:	d003      	beq.n	80011de <HAL_RCC_GetSysClockFreq+0x46>
 80011d6:	e02b      	b.n	8001230 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80011d8:	4b1c      	ldr	r3, [pc, #112]	; (800124c <HAL_RCC_GetSysClockFreq+0xb4>)
 80011da:	623b      	str	r3, [r7, #32]
      break;
 80011dc:	e02b      	b.n	8001236 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	0c9b      	lsrs	r3, r3, #18
 80011e2:	f003 030f 	and.w	r3, r3, #15
 80011e6:	3328      	adds	r3, #40	; 0x28
 80011e8:	443b      	add	r3, r7
 80011ea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80011ee:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d012      	beq.n	8001220 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011fa:	4b13      	ldr	r3, [pc, #76]	; (8001248 <HAL_RCC_GetSysClockFreq+0xb0>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	0c5b      	lsrs	r3, r3, #17
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	3328      	adds	r3, #40	; 0x28
 8001206:	443b      	add	r3, r7
 8001208:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800120c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	4a0e      	ldr	r2, [pc, #56]	; (800124c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001212:	fb03 f202 	mul.w	r2, r3, r2
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	fbb2 f3f3 	udiv	r3, r2, r3
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
 800121e:	e004      	b.n	800122a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	4a0b      	ldr	r2, [pc, #44]	; (8001250 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001224:	fb02 f303 	mul.w	r3, r2, r3
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122c:	623b      	str	r3, [r7, #32]
      break;
 800122e:	e002      	b.n	8001236 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001232:	623b      	str	r3, [r7, #32]
      break;
 8001234:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001236:	6a3b      	ldr	r3, [r7, #32]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3728      	adds	r7, #40	; 0x28
 800123c:	46bd      	mov	sp, r7
 800123e:	bc90      	pop	{r4, r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	08001ac8 	.word	0x08001ac8
 8001248:	40021000 	.word	0x40021000
 800124c:	007a1200 	.word	0x007a1200
 8001250:	003d0900 	.word	0x003d0900

08001254 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800125c:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <RCC_Delay+0x34>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a0a      	ldr	r2, [pc, #40]	; (800128c <RCC_Delay+0x38>)
 8001262:	fba2 2303 	umull	r2, r3, r2, r3
 8001266:	0a5b      	lsrs	r3, r3, #9
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	fb02 f303 	mul.w	r3, r2, r3
 800126e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001270:	bf00      	nop
  }
  while (Delay --);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	1e5a      	subs	r2, r3, #1
 8001276:	60fa      	str	r2, [r7, #12]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1f9      	bne.n	8001270 <RCC_Delay+0x1c>
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr
 8001288:	20000000 	.word	0x20000000
 800128c:	10624dd3 	.word	0x10624dd3

08001290 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e041      	b.n	8001326 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d106      	bne.n	80012bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff f86c 	bl	8000394 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2202      	movs	r2, #2
 80012c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3304      	adds	r3, #4
 80012cc:	4619      	mov	r1, r3
 80012ce:	4610      	mov	r0, r2
 80012d0:	f000 f9e6 	bl	80016a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2201      	movs	r2, #1
 80012d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2201      	movs	r2, #1
 80012e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2201      	movs	r2, #1
 80012e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2201      	movs	r2, #1
 80012f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2201      	movs	r2, #1
 80012f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2201      	movs	r2, #1
 8001300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2201      	movs	r2, #1
 8001308:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2201      	movs	r2, #1
 8001310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2201      	movs	r2, #1
 8001318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2201      	movs	r2, #1
 8001320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b01      	cmp	r3, #1
 8001342:	d001      	beq.n	8001348 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e032      	b.n	80013ae <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2202      	movs	r2, #2
 800134c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a18      	ldr	r2, [pc, #96]	; (80013b8 <HAL_TIM_Base_Start+0x88>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d00e      	beq.n	8001378 <HAL_TIM_Base_Start+0x48>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001362:	d009      	beq.n	8001378 <HAL_TIM_Base_Start+0x48>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a14      	ldr	r2, [pc, #80]	; (80013bc <HAL_TIM_Base_Start+0x8c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d004      	beq.n	8001378 <HAL_TIM_Base_Start+0x48>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a13      	ldr	r2, [pc, #76]	; (80013c0 <HAL_TIM_Base_Start+0x90>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d111      	bne.n	800139c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2b06      	cmp	r3, #6
 8001388:	d010      	beq.n	80013ac <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f042 0201 	orr.w	r2, r2, #1
 8001398:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800139a:	e007      	b.n	80013ac <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f042 0201 	orr.w	r2, r2, #1
 80013aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr
 80013b8:	40012c00 	.word	0x40012c00
 80013bc:	40000400 	.word	0x40000400
 80013c0:	40000800 	.word	0x40000800

080013c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d122      	bne.n	8001420 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d11b      	bne.n	8001420 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f06f 0202 	mvn.w	r2, #2
 80013f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2201      	movs	r2, #1
 80013f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	f003 0303 	and.w	r3, r3, #3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7fe ff7e 	bl	8000308 <HAL_TIM_IC_CaptureCallback>
 800140c:	e005      	b.n	800141a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 f92b 	bl	800166a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f000 f931 	bl	800167c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	2b04      	cmp	r3, #4
 800142c:	d122      	bne.n	8001474 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	2b04      	cmp	r3, #4
 800143a:	d11b      	bne.n	8001474 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f06f 0204 	mvn.w	r2, #4
 8001444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2202      	movs	r2, #2
 800144a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7fe ff54 	bl	8000308 <HAL_TIM_IC_CaptureCallback>
 8001460:	e005      	b.n	800146e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 f901 	bl	800166a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 f907 	bl	800167c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	691b      	ldr	r3, [r3, #16]
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	2b08      	cmp	r3, #8
 8001480:	d122      	bne.n	80014c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	f003 0308 	and.w	r3, r3, #8
 800148c:	2b08      	cmp	r3, #8
 800148e:	d11b      	bne.n	80014c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f06f 0208 	mvn.w	r2, #8
 8001498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2204      	movs	r2, #4
 800149e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	f003 0303 	and.w	r3, r3, #3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7fe ff2a 	bl	8000308 <HAL_TIM_IC_CaptureCallback>
 80014b4:	e005      	b.n	80014c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 f8d7 	bl	800166a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f000 f8dd 	bl	800167c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	f003 0310 	and.w	r3, r3, #16
 80014d2:	2b10      	cmp	r3, #16
 80014d4:	d122      	bne.n	800151c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	f003 0310 	and.w	r3, r3, #16
 80014e0:	2b10      	cmp	r3, #16
 80014e2:	d11b      	bne.n	800151c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f06f 0210 	mvn.w	r2, #16
 80014ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2208      	movs	r2, #8
 80014f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7fe ff00 	bl	8000308 <HAL_TIM_IC_CaptureCallback>
 8001508:	e005      	b.n	8001516 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 f8ad 	bl	800166a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 f8b3 	bl	800167c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b01      	cmp	r3, #1
 8001528:	d10e      	bne.n	8001548 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	2b01      	cmp	r3, #1
 8001536:	d107      	bne.n	8001548 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f06f 0201 	mvn.w	r2, #1
 8001540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 f888 	bl	8001658 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001552:	2b80      	cmp	r3, #128	; 0x80
 8001554:	d10e      	bne.n	8001574 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001560:	2b80      	cmp	r3, #128	; 0x80
 8001562:	d107      	bne.n	8001574 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800156c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f000 fa69 	bl	8001a46 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800157e:	2b40      	cmp	r3, #64	; 0x40
 8001580:	d10e      	bne.n	80015a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800158c:	2b40      	cmp	r3, #64	; 0x40
 800158e:	d107      	bne.n	80015a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 f877 	bl	800168e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	f003 0320 	and.w	r3, r3, #32
 80015aa:	2b20      	cmp	r3, #32
 80015ac:	d10e      	bne.n	80015cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	f003 0320 	and.w	r3, r3, #32
 80015b8:	2b20      	cmp	r3, #32
 80015ba:	d107      	bne.n	80015cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f06f 0220 	mvn.w	r2, #32
 80015c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 fa34 	bl	8001a34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d101      	bne.n	80015ec <HAL_TIM_SlaveConfigSynchro+0x18>
 80015e8:	2302      	movs	r3, #2
 80015ea:	e031      	b.n	8001650 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2202      	movs	r2, #2
 80015f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80015fc:	6839      	ldr	r1, [r7, #0]
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f000 f8b0 	bl	8001764 <TIM_SlaveTimer_SetConfig>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d009      	beq.n	800161e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2201      	movs	r2, #1
 800160e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e018      	b.n	8001650 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68da      	ldr	r2, [r3, #12]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800162c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800163c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2201      	movs	r2, #1
 8001642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800164e:	2300      	movs	r3, #0
}
 8001650:	4618      	mov	r0, r3
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr

0800166a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800166a:	b480      	push	{r7}
 800166c:	b083      	sub	sp, #12
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr

0800167c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr

0800168e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr

080016a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a29      	ldr	r2, [pc, #164]	; (8001758 <TIM_Base_SetConfig+0xb8>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d00b      	beq.n	80016d0 <TIM_Base_SetConfig+0x30>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016be:	d007      	beq.n	80016d0 <TIM_Base_SetConfig+0x30>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a26      	ldr	r2, [pc, #152]	; (800175c <TIM_Base_SetConfig+0xbc>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d003      	beq.n	80016d0 <TIM_Base_SetConfig+0x30>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a25      	ldr	r2, [pc, #148]	; (8001760 <TIM_Base_SetConfig+0xc0>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d108      	bne.n	80016e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	4313      	orrs	r3, r2
 80016e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a1c      	ldr	r2, [pc, #112]	; (8001758 <TIM_Base_SetConfig+0xb8>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d00b      	beq.n	8001702 <TIM_Base_SetConfig+0x62>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016f0:	d007      	beq.n	8001702 <TIM_Base_SetConfig+0x62>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a19      	ldr	r2, [pc, #100]	; (800175c <TIM_Base_SetConfig+0xbc>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d003      	beq.n	8001702 <TIM_Base_SetConfig+0x62>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a18      	ldr	r2, [pc, #96]	; (8001760 <TIM_Base_SetConfig+0xc0>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d108      	bne.n	8001714 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	4313      	orrs	r3, r2
 8001712:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	4313      	orrs	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68fa      	ldr	r2, [r7, #12]
 8001726:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a07      	ldr	r2, [pc, #28]	; (8001758 <TIM_Base_SetConfig+0xb8>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d103      	bne.n	8001748 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	691a      	ldr	r2, [r3, #16]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	615a      	str	r2, [r3, #20]
}
 800174e:	bf00      	nop
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr
 8001758:	40012c00 	.word	0x40012c00
 800175c:	40000400 	.word	0x40000400
 8001760:	40000800 	.word	0x40000800

08001764 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800177c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	4313      	orrs	r3, r2
 8001786:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	f023 0307 	bic.w	r3, r3, #7
 800178e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	697a      	ldr	r2, [r7, #20]
 8001796:	4313      	orrs	r3, r2
 8001798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b70      	cmp	r3, #112	; 0x70
 80017a8:	d01a      	beq.n	80017e0 <TIM_SlaveTimer_SetConfig+0x7c>
 80017aa:	2b70      	cmp	r3, #112	; 0x70
 80017ac:	d860      	bhi.n	8001870 <TIM_SlaveTimer_SetConfig+0x10c>
 80017ae:	2b60      	cmp	r3, #96	; 0x60
 80017b0:	d054      	beq.n	800185c <TIM_SlaveTimer_SetConfig+0xf8>
 80017b2:	2b60      	cmp	r3, #96	; 0x60
 80017b4:	d85c      	bhi.n	8001870 <TIM_SlaveTimer_SetConfig+0x10c>
 80017b6:	2b50      	cmp	r3, #80	; 0x50
 80017b8:	d046      	beq.n	8001848 <TIM_SlaveTimer_SetConfig+0xe4>
 80017ba:	2b50      	cmp	r3, #80	; 0x50
 80017bc:	d858      	bhi.n	8001870 <TIM_SlaveTimer_SetConfig+0x10c>
 80017be:	2b40      	cmp	r3, #64	; 0x40
 80017c0:	d019      	beq.n	80017f6 <TIM_SlaveTimer_SetConfig+0x92>
 80017c2:	2b40      	cmp	r3, #64	; 0x40
 80017c4:	d854      	bhi.n	8001870 <TIM_SlaveTimer_SetConfig+0x10c>
 80017c6:	2b30      	cmp	r3, #48	; 0x30
 80017c8:	d054      	beq.n	8001874 <TIM_SlaveTimer_SetConfig+0x110>
 80017ca:	2b30      	cmp	r3, #48	; 0x30
 80017cc:	d850      	bhi.n	8001870 <TIM_SlaveTimer_SetConfig+0x10c>
 80017ce:	2b20      	cmp	r3, #32
 80017d0:	d050      	beq.n	8001874 <TIM_SlaveTimer_SetConfig+0x110>
 80017d2:	2b20      	cmp	r3, #32
 80017d4:	d84c      	bhi.n	8001870 <TIM_SlaveTimer_SetConfig+0x10c>
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d04c      	beq.n	8001874 <TIM_SlaveTimer_SetConfig+0x110>
 80017da:	2b10      	cmp	r3, #16
 80017dc:	d04a      	beq.n	8001874 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80017de:	e047      	b.n	8001870 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6818      	ldr	r0, [r3, #0]
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	68d9      	ldr	r1, [r3, #12]
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	f000 f8a3 	bl	800193a <TIM_ETR_SetConfig>
      break;
 80017f4:	e03f      	b.n	8001876 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2b05      	cmp	r3, #5
 80017fc:	d101      	bne.n	8001802 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e03a      	b.n	8001878 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6a1a      	ldr	r2, [r3, #32]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 0201 	bic.w	r2, r2, #1
 8001818:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001828:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	011b      	lsls	r3, r3, #4
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	4313      	orrs	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	621a      	str	r2, [r3, #32]
      break;
 8001846:	e016      	b.n	8001876 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6818      	ldr	r0, [r3, #0]
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	6899      	ldr	r1, [r3, #8]
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	461a      	mov	r2, r3
 8001856:	f000 f813 	bl	8001880 <TIM_TI1_ConfigInputStage>
      break;
 800185a:	e00c      	b.n	8001876 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6818      	ldr	r0, [r3, #0]
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	6899      	ldr	r1, [r3, #8]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	461a      	mov	r2, r3
 800186a:	f000 f837 	bl	80018dc <TIM_TI2_ConfigInputStage>
      break;
 800186e:	e002      	b.n	8001876 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8001870:	bf00      	nop
 8001872:	e000      	b.n	8001876 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8001874:	bf00      	nop
  }
  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001880:	b480      	push	{r7}
 8001882:	b087      	sub	sp, #28
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6a1b      	ldr	r3, [r3, #32]
 8001896:	f023 0201 	bic.w	r2, r3, #1
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	011b      	lsls	r3, r3, #4
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f023 030a 	bic.w	r3, r3, #10
 80018bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	621a      	str	r2, [r3, #32]
}
 80018d2:	bf00      	nop
 80018d4:	371c      	adds	r7, #28
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr

080018dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80018dc:	b480      	push	{r7}
 80018de:	b087      	sub	sp, #28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	f023 0210 	bic.w	r2, r3, #16
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001906:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	031b      	lsls	r3, r3, #12
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	4313      	orrs	r3, r2
 8001910:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001918:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	011b      	lsls	r3, r3, #4
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	621a      	str	r2, [r3, #32]
}
 8001930:	bf00      	nop
 8001932:	371c      	adds	r7, #28
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr

0800193a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800193a:	b480      	push	{r7}
 800193c:	b087      	sub	sp, #28
 800193e:	af00      	add	r7, sp, #0
 8001940:	60f8      	str	r0, [r7, #12]
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	607a      	str	r2, [r7, #4]
 8001946:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001954:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	021a      	lsls	r2, r3, #8
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	431a      	orrs	r2, r3
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	4313      	orrs	r3, r2
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	4313      	orrs	r3, r2
 8001966:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	609a      	str	r2, [r3, #8]
}
 800196e:	bf00      	nop
 8001970:	371c      	adds	r7, #28
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr

08001978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001988:	2b01      	cmp	r3, #1
 800198a:	d101      	bne.n	8001990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800198c:	2302      	movs	r3, #2
 800198e:	e046      	b.n	8001a1e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2202      	movs	r2, #2
 800199c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	4313      	orrs	r3, r2
 80019c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a16      	ldr	r2, [pc, #88]	; (8001a28 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d00e      	beq.n	80019f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019dc:	d009      	beq.n	80019f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a12      	ldr	r2, [pc, #72]	; (8001a2c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d004      	beq.n	80019f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a10      	ldr	r2, [pc, #64]	; (8001a30 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d10c      	bne.n	8001a0c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	68ba      	ldr	r2, [r7, #8]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68ba      	ldr	r2, [r7, #8]
 8001a0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr
 8001a28:	40012c00 	.word	0x40012c00
 8001a2c:	40000400 	.word	0x40000400
 8001a30:	40000800 	.word	0x40000800

08001a34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bc80      	pop	{r7}
 8001a44:	4770      	bx	lr

08001a46 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <__libc_init_array>:
 8001a58:	b570      	push	{r4, r5, r6, lr}
 8001a5a:	2600      	movs	r6, #0
 8001a5c:	4d0c      	ldr	r5, [pc, #48]	; (8001a90 <__libc_init_array+0x38>)
 8001a5e:	4c0d      	ldr	r4, [pc, #52]	; (8001a94 <__libc_init_array+0x3c>)
 8001a60:	1b64      	subs	r4, r4, r5
 8001a62:	10a4      	asrs	r4, r4, #2
 8001a64:	42a6      	cmp	r6, r4
 8001a66:	d109      	bne.n	8001a7c <__libc_init_array+0x24>
 8001a68:	f000 f822 	bl	8001ab0 <_init>
 8001a6c:	2600      	movs	r6, #0
 8001a6e:	4d0a      	ldr	r5, [pc, #40]	; (8001a98 <__libc_init_array+0x40>)
 8001a70:	4c0a      	ldr	r4, [pc, #40]	; (8001a9c <__libc_init_array+0x44>)
 8001a72:	1b64      	subs	r4, r4, r5
 8001a74:	10a4      	asrs	r4, r4, #2
 8001a76:	42a6      	cmp	r6, r4
 8001a78:	d105      	bne.n	8001a86 <__libc_init_array+0x2e>
 8001a7a:	bd70      	pop	{r4, r5, r6, pc}
 8001a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a80:	4798      	blx	r3
 8001a82:	3601      	adds	r6, #1
 8001a84:	e7ee      	b.n	8001a64 <__libc_init_array+0xc>
 8001a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a8a:	4798      	blx	r3
 8001a8c:	3601      	adds	r6, #1
 8001a8e:	e7f2      	b.n	8001a76 <__libc_init_array+0x1e>
 8001a90:	08001ae8 	.word	0x08001ae8
 8001a94:	08001ae8 	.word	0x08001ae8
 8001a98:	08001ae8 	.word	0x08001ae8
 8001a9c:	08001aec 	.word	0x08001aec

08001aa0 <memset>:
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	4402      	add	r2, r0
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d100      	bne.n	8001aaa <memset+0xa>
 8001aa8:	4770      	bx	lr
 8001aaa:	f803 1b01 	strb.w	r1, [r3], #1
 8001aae:	e7f9      	b.n	8001aa4 <memset+0x4>

08001ab0 <_init>:
 8001ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ab2:	bf00      	nop
 8001ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ab6:	bc08      	pop	{r3}
 8001ab8:	469e      	mov	lr, r3
 8001aba:	4770      	bx	lr

08001abc <_fini>:
 8001abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001abe:	bf00      	nop
 8001ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ac2:	bc08      	pop	{r3}
 8001ac4:	469e      	mov	lr, r3
 8001ac6:	4770      	bx	lr
